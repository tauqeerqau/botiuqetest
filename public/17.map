{"version":3,"file":"17.chunk.js","sources":["webpack:///./~/rxjs/add/operator/do.js?191b****","webpack:///./~/rxjs/operator/do.js?a264****","webpack:///./src/app/showmeasurement/show.Measurement.component.ts","webpack:///./src/app/showmeasurement/show.Measurement.module.ts","webpack:///./src/app/showmeasurement/show.Measurement.style.css","webpack:///./src/app/showmeasurement/show.Measurement.template.html","webpack:///./src/models/employeeRole.ts?0117*","webpack:///./src/models/measurement.ts","webpack:///./src/services/customer.Service.ts?80d1***","webpack:///./src/services/employee.Service.ts?548f*","webpack:///./src/services/measurement.Service.ts","webpack:///./src/utilities/Server.ts?7466****"],"sourcesContent":["\"use strict\";\nvar Observable_1 = require('../../Observable');\nvar do_1 = require('../../operator/do');\nObservable_1.Observable.prototype.do = do_1._do;\nObservable_1.Observable.prototype._do = do_1._do;\n//# sourceMappingURL=do.js.map\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/rxjs/add/operator/do.js\n// module id = ./node_modules/rxjs/add/operator/do.js\n// module chunks = 1 9 11 13 14 17 18 19 20","\"use strict\";\nvar __extends = (this && this.__extends) || function (d, b) {\n    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n    function __() { this.constructor = d; }\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n};\nvar Subscriber_1 = require('../Subscriber');\n/**\n * Perform a side effect for every emission on the source Observable, but return\n * an Observable that is identical to the source.\n *\n * <span class=\"informal\">Intercepts each emission on the source and runs a\n * function, but returns an output which is identical to the source.</span>\n *\n * <img src=\"./img/do.png\" width=\"100%\">\n *\n * Returns a mirrored Observable of the source Observable, but modified so that\n * the provided Observer is called to perform a side effect for every value,\n * error, and completion emitted by the source. Any errors that are thrown in\n * the aforementioned Observer or handlers are safely sent down the error path\n * of the output Observable.\n *\n * This operator is useful for debugging your Observables for the correct values\n * or performing other side effects.\n *\n * Note: this is different to a `subscribe` on the Observable. If the Observable\n * returned by `do` is not subscribed, the side effects specified by the\n * Observer will never happen. `do` therefore simply spies on existing\n * execution, it does not trigger an execution to happen like `subscribe` does.\n *\n * @example <caption>Map every every click to the clientX position of that click, while also logging the click event</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var positions = clicks\n *   .do(ev => console.log(ev))\n *   .map(ev => ev.clientX);\n * positions.subscribe(x => console.log(x));\n *\n * @see {@link map}\n * @see {@link subscribe}\n *\n * @param {Observer|function} [nextOrObserver] A normal Observer object or a\n * callback for `next`.\n * @param {function} [error] Callback for errors in the source.\n * @param {function} [complete] Callback for the completion of the source.\n * @return {Observable} An Observable identical to the source, but runs the\n * specified Observer or callback(s) for each item.\n * @method do\n * @name do\n * @owner Observable\n */\nfunction _do(nextOrObserver, error, complete) {\n    return this.lift(new DoOperator(nextOrObserver, error, complete));\n}\nexports._do = _do;\nvar DoOperator = (function () {\n    function DoOperator(nextOrObserver, error, complete) {\n        this.nextOrObserver = nextOrObserver;\n        this.error = error;\n        this.complete = complete;\n    }\n    DoOperator.prototype.call = function (subscriber, source) {\n        return source._subscribe(new DoSubscriber(subscriber, this.nextOrObserver, this.error, this.complete));\n    };\n    return DoOperator;\n}());\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nvar DoSubscriber = (function (_super) {\n    __extends(DoSubscriber, _super);\n    function DoSubscriber(destination, nextOrObserver, error, complete) {\n        _super.call(this, destination);\n        var safeSubscriber = new Subscriber_1.Subscriber(nextOrObserver, error, complete);\n        safeSubscriber.syncErrorThrowable = true;\n        this.add(safeSubscriber);\n        this.safeSubscriber = safeSubscriber;\n    }\n    DoSubscriber.prototype._next = function (value) {\n        var safeSubscriber = this.safeSubscriber;\n        safeSubscriber.next(value);\n        if (safeSubscriber.syncErrorThrown) {\n            this.destination.error(safeSubscriber.syncErrorValue);\n        }\n        else {\n            this.destination.next(value);\n        }\n    };\n    DoSubscriber.prototype._error = function (err) {\n        var safeSubscriber = this.safeSubscriber;\n        safeSubscriber.error(err);\n        if (safeSubscriber.syncErrorThrown) {\n            this.destination.error(safeSubscriber.syncErrorValue);\n        }\n        else {\n            this.destination.error(err);\n        }\n    };\n    DoSubscriber.prototype._complete = function () {\n        var safeSubscriber = this.safeSubscriber;\n        safeSubscriber.complete();\n        if (safeSubscriber.syncErrorThrown) {\n            this.destination.error(safeSubscriber.syncErrorValue);\n        }\n        else {\n            this.destination.complete();\n        }\n    };\n    return DoSubscriber;\n}(Subscriber_1.Subscriber));\n//# sourceMappingURL=do.js.map\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/rxjs/operator/do.js\n// module id = ./node_modules/rxjs/operator/do.js\n// module chunks = 1 9 11 13 14 17 18 19 20","import { Component } from '@angular/core';\r\nimport { Customer } from './../../models/customer';\r\nimport { SearchByName } from './../../models/searchByNameModel';\r\nimport { Measurement } from './../../models/measurement';\r\nimport { CustomerService } from './../../services/customer.Service';\r\nimport { MeasurementService } from './../../services/measurement.Service';\r\nimport { EmployeeService } from './../../services/employee.Service';\r\nimport { Employee } from './../../models/employee';\r\nimport { String } from 'core-js/library/web/timers';\r\n\r\ndeclare var $: any;\r\n\r\n@Component({\r\n    selector: 'ShowMeasurement',\r\n    template: require('./show.Measurement.template.html'),\r\n    styles: [require('./show.Measurement.style.css')],\r\n    providers: [CustomerService, MeasurementService, EmployeeService]\r\n})\r\n\r\nexport class ShowMeasurementComponent {\r\n    constructor(private _measurementService: MeasurementService,\r\n        private _customerService: CustomerService, private _employeeService: EmployeeService) {\r\n    }\r\n    public MultipleMeasurement:Measurement[] = [];\r\n    public newMeasurement;\r\n    public _SearchByName:SearchByName[]=[];\r\n    public Customer_Id: any;\r\n    public CustomerContactName:any;\r\n    public customers: Customer[];\r\n    public employees: Employee[];\r\n    public Employee_Id: String;\r\n    public _Measurement: Measurement;\r\n    public ShalwarKameez: boolean = false;\r\n    public Coat: boolean = false;\r\n    public Sherwani: boolean = false;\r\n    public WaistCoat: boolean = false;\r\n    public Pant: boolean = false;\r\n    public Trouser: boolean = false;\r\n\r\n    addMeasurement(): void {\r\n        if (this.ShalwarKameez == true) {\r\n            if (this.newMeasurement.ShalwarKameezLength == \"\" || this.newMeasurement.ShalwarKameezChest == \"\" || this.newMeasurement.ShalwarKameezWaist == \"\" || this.newMeasurement.ShalwarKameezHip == \"\" || this.newMeasurement.ShalwarKameezSleeve == \"\" || this.newMeasurement.ShalwarKameezShoulder == \"\" || this.newMeasurement.ShalwarKameezNeck == \"\" || this.newMeasurement.ShalwarKameezBysep == \"\" || this.newMeasurement.ShalwarKameezSLength == \"\" || this.newMeasurement.ShalwarKameezBottom == \"\") {\r\n                $(\"#snackbar\").html(\"Please fill the empty Field\");\r\n                this.showToast();\r\n            }\r\n\r\n            else {\r\n\r\n                console.log(this.newMeasurement);\r\n                this._measurementService.addMeasurement(this.newMeasurement).subscribe(res => {\r\n                    console.log(res);\r\n                    if (res.code == 200) {\r\n                        $(\"#snackbar\").html(\"Values Saved!\");\r\n                        this.showToast();\r\n                        this.newMeasurement = new Measurement();\r\n                        $(\"#selectType\").hide();\r\n                        this.allFalse();\r\n                    } else {\r\n                        $(\"#snackbar\").html(res.message);\r\n                        this.showToast();\r\n                    }\r\n                });\r\n            }\r\n        }\r\n        else if (this.Coat == true) {\r\n            if (this.newMeasurement.CoatLength == \"\" || this.newMeasurement.CoatChest == \"\" || this.newMeasurement.CoatWaist == \"\" || this.newMeasurement.CoatHip == \"\" || this.newMeasurement.CoatSleeve == \"\" || this.newMeasurement.CoatShoulder == \"\" || this.newMeasurement.CoatNeck == \"\" || this.newMeasurement.CoatBysep == \"\" || this.newMeasurement.CoatHB == \"\" || this.newMeasurement.CoatCB == \"\") {\r\n                $(\"#snackbar\").html(\"Please fill the empty Field\");\r\n                this.showToast();\r\n            }\r\n\r\n            else {\r\n                console.log(this.newMeasurement);\r\n                this._measurementService.addMeasurement(this.newMeasurement).subscribe(res => {\r\n                    console.log(res);\r\n                    if (res.code == 200) {\r\n                        $(\"#snackbar\").html(\"Values Saved!\");\r\n                        this.showToast();\r\n                        this.newMeasurement = new Measurement();\r\n                        $(\"#selectType\").hide();\r\n                        this.allFalse();\r\n                    } else {\r\n                        $(\"#snackbar\").html(res.message);\r\n                        this.showToast();\r\n                    }\r\n                });\r\n            }\r\n        }\r\n        else if (this.Sherwani == true) {\r\n            if (this.newMeasurement.SherwaniLength == \"\" || this.newMeasurement.SherwaniChest == \"\" || this.newMeasurement.SherwaniWaist == \"\" || this.newMeasurement.SherwaniHip == \"\" || this.newMeasurement.SherwaniSleeve == \"\" || this.newMeasurement.SherwaniShoulder == \"\" || this.newMeasurement.SherwaniNeck == \"\" || this.newMeasurement.SherwaniBysep == \"\" || this.newMeasurement.SherwaniHB == \"\" || this.newMeasurement.SherwaniCB == \"\") {\r\n                $(\"#snackbar\").html(\"Please fill the empty Field\");\r\n                this.showToast();\r\n            }\r\n\r\n            else {\r\n                console.log(this.newMeasurement);\r\n                this._measurementService.addMeasurement(this.newMeasurement).subscribe(res => {\r\n                    console.log(res);\r\n                    if (res.code == 200) {\r\n                        $(\"#snackbar\").html(\"Values Saved!\");\r\n                        this.showToast();\r\n                        this.newMeasurement = new Measurement();\r\n                        $(\"#selectType\").hide();\r\n                        this.allFalse();\r\n                    } else {\r\n                        $(\"#snackbar\").html(res.message);\r\n                        this.showToast();\r\n                    }\r\n                });\r\n            }\r\n        }\r\n        else if (this.WaistCoat == true) {\r\n            if (this.newMeasurement.CoatLength == \"\" || this.newMeasurement.CoatChest == \"\" || this.newMeasurement.CoatWaist == \"\" || this.newMeasurement.CoatHip == \"\" || this.newMeasurement.CoatHip == \"\" || this.newMeasurement.CoatShoulder == \"\" || this.newMeasurement.CoatNeck == \"\" || this.newMeasurement.CoatBysep == \"\" || this.newMeasurement.CoatHB == \"\" || this.newMeasurement.CoatCB == \"\") {\r\n                $(\"#snackbar\").html(\"Please fill the empty Field\");\r\n                this.showToast();\r\n            }\r\n\r\n            else {\r\n                console.log(this.newMeasurement);\r\n                this._measurementService.addMeasurement(this.newMeasurement).subscribe(res => {\r\n                    console.log(res);\r\n                    if (res.code == 200) {\r\n                        $(\"#snackbar\").html(\"Values Saved!\");\r\n                        this.showToast();\r\n                        this.newMeasurement = new Measurement();\r\n                        $(\"#selectType\").hide();\r\n                        this.allFalse();\r\n                    } else {\r\n                        $(\"#snackbar\").html(res.message);\r\n                        this.showToast();\r\n                    }\r\n                });\r\n            }\r\n        }\r\n        else if (this.Pant == true) {\r\n            if (this.newMeasurement.PentWaist == \"\" || this.newMeasurement.PentHip == \"\" || this.newMeasurement.PentLength == \"\" || this.newMeasurement.PantKnee == \"\" || this.newMeasurement.PentBottom == \"\" || this.newMeasurement.PentInside == \"\") {\r\n                $(\"#snackbar\").html(\"Please fill the empty Field\");\r\n                this.showToast();\r\n            }\r\n\r\n            else {\r\n                console.log(this.newMeasurement);\r\n                this._measurementService.addMeasurement(this.newMeasurement).subscribe(res => {\r\n                    console.log(res);\r\n                    if (res.code == 200) {\r\n                        $(\"#snackbar\").html(\"Values Saved!\");\r\n                        this.showToast();\r\n                        this.newMeasurement = new Measurement();\r\n                        $(\"#selectType\").hide();\r\n                        this.allFalse();\r\n                    } else {\r\n                        $(\"#snackbar\").html(res.message);\r\n                        this.showToast();\r\n                    }\r\n                });\r\n            }\r\n        }\r\n        else if (this.Trouser == true) {\r\n            if (this.newMeasurement.TrouserWaist == \"\" || this.newMeasurement.TrouserHip == \"\" || this.newMeasurement.TrouserLength == \"\" || this.newMeasurement.TrouserKnee == \"\" || this.newMeasurement.TrouserBottom == \"\" || this.newMeasurement.TrouserInside == \"\") {\r\n                $(\"#snackbar\").html(\"Please fill the empty Field\");\r\n                this.showToast();\r\n            }\r\n\r\n            else {\r\n\r\n                console.log('employeeid', this.newMeasurement);\r\n                console.log(this.newMeasurement);\r\n                this._measurementService.addMeasurement(this.newMeasurement).subscribe(res => {\r\n                    console.log(res);\r\n                    if (res.code == 200) {\r\n                        $(\"#snackbar\").html(\"Values Saved!\");\r\n                        this.showToast();\r\n                        this.newMeasurement = new Measurement();\r\n                        $(\"#selectType\").hide();\r\n                        this.allFalse();\r\n                    } else {\r\n                        $(\"#snackbar\").html(res.message);\r\n                        this.showToast();\r\n                    }\r\n                });\r\n            }\r\n        }\r\n        else {\r\n            $(\"#snackbar\").html(\"Please Select Right Choice\");\r\n            this.showToast();\r\n\r\n        }\r\n\r\n    }\r\n    searchByName()\r\n    {\r\n        this._customerService.getCustomersByContactName(this.newMeasurement.CustomerContactName).subscribe(res => {\r\n            if (res.code == 200) {\r\n                this.customers = res.data;\r\n                $(\"#snackbar\").html(\"Data is Available\");\r\n            \r\n            }\r\n            else {\r\n                this.customers = null;\r\n                $(\"#snackbar\").html(\"Data not Available\");\r\n            }\r\n            console.log(\"customer for referance is\");\r\n            console.log(this.customers);\r\n        });\r\n        this.newMeasurement.CustomerContactName=undefined;\r\n    }\r\n    search(): void {\r\n        this._customerService.getCustomersByContactNumber(this.newMeasurement.CustomerContactNumber).subscribe(res => {\r\n            if (res.code == 200) {\r\n                this.customers = res.data;\r\n                console.log(this.customers);\r\n                $(\"#snackbar\").html(\"Data is Available\");\r\n            }\r\n            else {\r\n                this.customers = null;\r\n                $(\"#snackbar\").html(\"Data not Available\");\r\n            }\r\n            console.log(\"customer for referance is\");\r\n            console.log(this.customers);\r\n        });\r\n        this.newMeasurement.CustomerContactNumber=undefined;\r\n    }\r\n\r\n\r\n    showToast() {\r\n        // Get the snackbar DIV\r\n        var x = document.getElementById(\"snackbar\")\r\n\r\n        // Add the \"show\" class to DIV\r\n        x.className = \"show\";\r\n\r\n        // After 3 seconds, remove the show class from DIV\r\n        setTimeout(function () { x.className = x.className.replace(\"show\", \"\"); }, 3000);\r\n    }\r\n\r\n    onChange(_id: string): void {\r\n        console.log(\"CHange is Clicked\" + _id);\r\n        this.newMeasurement.CustomerId = _id;\r\n        $(\"#selectType\").show();\r\n    }\r\n\r\n\r\n    allFalse() {\r\n\r\n        this.Sherwani = false;\r\n        this.WaistCoat = false;\r\n        this.Coat = false;\r\n        this.ShalwarKameez = false;\r\n        this.Pant = false;\r\n        this.Trouser = false;\r\n\r\n    }\r\n\r\n    getForms(elem) {\r\n        this.allFalse();\r\n        console.log(\"elem is \"+elem);\r\n        if (elem == \"Shalwar Kameez\") {\r\n            console.log(\"Inside SK\");\r\n            this.allFalse();\r\n            this.ShalwarKameez = true;\r\n            this._customerService.GetMeasurementById(this.Customer_Id).subscribe(res => {\r\n                console.log(\"response received is \"+res);\r\n                for (var i = 0; i < res.data.length; i++) {\r\n                    if ((res.data[i].CustomerId._id == this.Customer_Id) || res.data[i].CustomerId._id==this.customers[i]._id ) {\r\n                        this.MultipleMeasurement[i] = res.data[i];\r\n                        $(\"#snackbar\").html(\"Data Recieved!\");\r\n                        console.log(this.MultipleMeasurement);\r\n                        this.showToast();\r\n                       \r\n                        \r\n                    }\r\n                    else {\r\n                       \r\n                        $(\"#snackbar\").html(\"Data Not Available!\");\r\n                        this.showToast();   \r\n                    }\r\n                }\r\n            \r\n            });\r\n\r\n        } else if (elem == \"Coat\") {\r\n            this.allFalse();\r\n           \r\n            this.Coat = true;\r\n            this._customerService.GetMeasurementById(this.Customer_Id).subscribe(res => {\r\n                console.log(res);\r\n                for (var i = 0; i < res.data.length; i++) {\r\n                    if (res.data[i].CustomerId._id == this.Customer_Id) {\r\n                        this.MultipleMeasurement[i] = res.data[i];\r\n                        $(\"#snackbar\").html(\"Data Recieved!\");\r\n                        console.log(this.MultipleMeasurement);\r\n                        this.showToast();\r\n                        \r\n                        \r\n                    }\r\n                    else {\r\n                       \r\n                        $(\"#snackbar\").html(\"Data Not Available!\");\r\n                        this.showToast();   \r\n                    }\r\n                }\r\n              \r\n            \r\n            });\r\n        } else if (elem == \"Sherwani\") {\r\n         \r\n            this.allFalse();\r\n            this.Sherwani = true;\r\n            this._customerService.GetMeasurementById(this.Customer_Id).subscribe(res => {\r\n                console.log(res);\r\n                for (var i = 0; i < res.data.length; i++) {\r\n                    if (res.data[i].CustomerId._id == this.Customer_Id) {\r\n                        this.MultipleMeasurement[i] = res.data[i];\r\n                        $(\"#snackbar\").html(\"Data Recieved!\");\r\n                        console.log(this.MultipleMeasurement);\r\n                        this.showToast();\r\n                       \r\n                        \r\n                    }\r\n                    else {\r\n                       \r\n                        $(\"#snackbar\").html(\"Data Not Available!\");\r\n                        this.showToast();   \r\n                    }\r\n                }\r\n            \r\n            });\r\n           \r\n        } \r\n        else if (elem == \"Waist Coat\") {\r\n         \r\n            this.allFalse();\r\n            this.WaistCoat = true;\r\n            this._customerService.GetMeasurementById(this.Customer_Id).subscribe(res => {\r\n                console.log(res);\r\n                for (var i = 0; i < res.data.length; i++) {\r\n                    if (res.data[i].CustomerId._id == this.Customer_Id) {\r\n                        this.MultipleMeasurement[i] = res.data[i];\r\n                        $(\"#snackbar\").html(\"Data Recieved!\");\r\n                        console.log(this.MultipleMeasurement);\r\n                        this.showToast();\r\n                     \r\n                        \r\n                    }\r\n                    else {\r\n                       \r\n                        $(\"#snackbar\").html(\"Data Not Available!\");\r\n                        this.showToast();   \r\n                    }\r\n                }\r\n            \r\n            });\r\n           \r\n         }\r\n          else if (elem == \"Pant\") {\r\n           \r\n            this.allFalse();\r\n            this.Pant = true;\r\n            this._customerService.GetMeasurementById(this.Customer_Id).subscribe(res => {\r\n                console.log(res);\r\n                for (var i = 0; i < res.data.length; i++) {\r\n                    if (res.data[i].CustomerId._id == this.Customer_Id) {\r\n                        this.MultipleMeasurement[i] = res.data[i];\r\n                        $(\"#snackbar\").html(\"Data Recieved!\");\r\n                        console.log(this.MultipleMeasurement);\r\n                        this.showToast();\r\n                      \r\n                        \r\n                    }\r\n                    else {\r\n                       \r\n                        $(\"#snackbar\").html(\"Data Not Available!\");\r\n                        this.showToast();   \r\n                    }\r\n                }\r\n            \r\n            });\r\n           \r\n        } \r\n        else {\r\n            this.allFalse();\r\n         \r\n            this.Trouser = true;\r\n            this._customerService.GetMeasurementById(this.Customer_Id).subscribe(res => {\r\n                console.log(res);\r\n                for (var i = 0; i < res.data.length; i++) {\r\n                    if (res.data[i].CustomerId._id == this.Customer_Id) {\r\n                        this.MultipleMeasurement[i] = res.data[i];\r\n                        $(\"#snackbar\").html(\"Data Recieved!\");\r\n                        console.log(this.MultipleMeasurement);\r\n                        this.showToast();\r\n                        \r\n                        \r\n                    }\r\n                    else {\r\n                       \r\n                        $(\"#snackbar\").html(\"Data Not Available!\");\r\n                        this.showToast();   \r\n                    }\r\n                }\r\n            \r\n            });\r\n            \r\n        }\r\n\r\n    }\r\n    getcutomerId(Customer_Id)\r\n    {\r\nthis.Customer_Id=Customer_Id;\r\nconsole.log(this.Customer_Id);\r\n\r\n    }\r\n    getEmployeesShalwarKameezId(employeesId) {\r\n        this.Employee_Id = employeesId;\r\n        console.log(this.Employee_Id);\r\n        this._Measurement = new Measurement();\r\n        this._Measurement.ShalwarKameezMeasurementTakenBy = this.Employee_Id;\r\n        this.newMeasurement.ShalwarKameezMeasurementTakenBy = this.Employee_Id;\r\n        console.log('employeeid', this.newMeasurement);\r\n\r\n       \r\n\r\n    }\r\n    getEmployeesSherwaniId(employeesId) {\r\n        this._Measurement = new Measurement();\r\n        this.Employee_Id = employeesId;\r\n        this._Measurement.SherwaniMeasurementTakenBy = this.Employee_Id;\r\n        this.newMeasurement.SherwaniMeasurementTakenBy = this.Employee_Id;\r\n        console.log('employeeid', this.newMeasurement);\r\n    }\r\n    getEmployeesWaistCoatId(employeesId) {\r\n        this._Measurement = new Measurement();\r\n        this.Employee_Id = employeesId;\r\n        this._Measurement.WaistCoatMeasurementTakenBy = this.Employee_Id;\r\n        this.newMeasurement.WaistCoatMeasurementTakenBy = this.Employee_Id;\r\n        console.log('employeeid', this.newMeasurement);\r\n    }\r\n    getEmployeesPantId(employeesId) {\r\n        this._Measurement = new Measurement();\r\n        this.Employee_Id = employeesId;\r\n        this._Measurement.PentMeasurementTakenBy = this.Employee_Id;\r\n        this.newMeasurement.PentMeasurementTakenBy = this.Employee_Id;\r\n        console.log('employeeid', this.newMeasurement);\r\n    }\r\n    getEmployeesCoatId(employeesId) {\r\n        this._Measurement = new Measurement();\r\n        this.Employee_Id = employeesId;\r\n        this._Measurement.CoatMeasurementTakenBy = this.Employee_Id;\r\n        this.newMeasurement.CoatMeasurementTakenBy = this.Employee_Id;\r\n        console.log('employeeid', this.newMeasurement);\r\n    }\r\n    getEmployeesTrouserId(employeesId) {\r\n        this._Measurement = new Measurement();\r\n        this.Employee_Id = employeesId;\r\n        this._Measurement.TrouserMeasurementTakenBy = this.Employee_Id;\r\n        this.newMeasurement.TrouserMeasurementTakenBy = this.Employee_Id;\r\n        console.log('employeeid', this.newMeasurement);\r\n    }\r\n\r\n\r\n\r\n    ngOnInit(): void {\r\n        this.newMeasurement = new Measurement();\r\n        this._employeeService.getEmployees().subscribe(res => {\r\n            if (res.code == 200) {\r\n                this.employees = res.data;\r\n                console.log('Employeesss', this.employees);\r\n\r\n            }\r\n            else {\r\n                this.employees = null;\r\n            }\r\n            console.log(\"Employees Received are\");\r\n            console.log(this.employees);\r\n        });\r\n    }\r\n\r\n}\n\n\n// WEBPACK FOOTER //\n// node_modules/angular2-template-loader!./~/string-replace-loader?{\"search\":\"(System|SystemJS)(.*[/n/r]/s*/.|/.)import/((.+)/)\",\"replace\":\"$1.import($3).then(mod => (mod.__esModule && mod.default) ? mod.default : mod)\",\"flags\":\"g\"}!./src/app/showmeasurement/show.Measurement.component.ts","import { CommonModule } from '@angular/common';\r\nimport { FormsModule } from '@angular/forms';\r\nimport { NgModule } from '@angular/core';\r\nimport { RouterModule } from '@angular/router';\r\n\r\nimport { ShowMeasurementComponent } from './show.Measurement.component';\r\n\r\nexport const routes = [\r\n  { path: '', component: ShowMeasurementComponent, pathMatch: 'full' }\r\n];\r\n\r\n@NgModule({\r\n  declarations: [\r\n    ShowMeasurementComponent\r\n  ],\r\n  imports: [\r\n    CommonModule,\r\n    FormsModule,\r\n    RouterModule.forChild(routes),\r\n  ]\r\n})\r\nexport default class ShowMeasurementModule {\r\n  static routes = routes;\r\n}\r\n\n\n\n// WEBPACK FOOTER //\n// node_modules/angular2-template-loader!./~/string-replace-loader?{\"search\":\"(System|SystemJS)(.*[/n/r]/s*/.|/.)import/((.+)/)\",\"replace\":\"$1.import($3).then(mod => (mod.__esModule && mod.default) ? mod.default : mod)\",\"flags\":\"g\"}!./src/app/showmeasurement/show.Measurement.module.ts","module.exports = \".add-btn{\\r\\n    border:none;\\r\\n    height:46px;\\r\\n    padding:10px 2px;\\r\\n    min-width:250px;\\r\\n    margin:0 auto;\\r\\n  }\\r\\n\\r\\n  fieldset{\\r\\n    border: 1px solid #ccc;\\r\\n    padding: 10px;\\r\\n  }\\r\\n\\r\\n  legend{\\r\\n    color: black;\\r\\n    font-size: 22px;\\r\\n    border-bottom: none;\\r\\n    padding-left: 30px;\\r\\n  }\\r\\n\\r\\n  .common-form{\\r\\n    -webkit-box-shadow: 0 10px 6px -6px #777;\\r\\n\\t   -moz-box-shadow: 0 10px 6px -6px #777;\\r\\n\\t        box-shadow: 0 10px 6px -6px #777;\\r\\n  }\\r\\n\\r\\n  .row{\\r\\n    margin-top:20px;\\r\\n  }\\r\\n  .row-2{\\r\\n    margin-top:100px;\\r\\n  }\\r\\n\\r\\n  .measurementsType{\\r\\n    width:350px;\\r\\n    height:40px;\\r\\n    border:1px solid #ccc;\\r\\n    border-radius: 0;\\r\\n    padding-left:5px;\\r\\n    color:#555555;\\r\\n    padding:10px;\\r\\n    margin:25px auto;\\r\\n  }\\r\\n\\r\\n  .record-text{\\r\\n    margin:25px auto;\\r\\n    text-align: center;\\r\\n    columns: #222222;\\r\\n    text-transform: uppercase;\\r\\n  }\\r\\n\\r\\n\\r\\n\\r\\n  /* The snackbar - position it at the bottom and in the middle of the screen */\\r\\n#snackbar {\\r\\n  visibility: hidden; /* Hidden by default. Visible on click */\\r\\n  min-width: 250px; /* Set a default minimum width */\\r\\n  margin-left: -125px; /* Divide value of min-width by 2 */\\r\\n  background-color: #333; /* Black background color */\\r\\n  color: #fff; /* White text color */\\r\\n  text-align: center; /* Centered text */\\r\\n  border-radius: 2px; /* Rounded borders */\\r\\n  padding: 16px; /* Padding */\\r\\n  position: fixed; /* Sit on top of the screen */\\r\\n  z-index: 1; /* Add a z-index if needed */\\r\\n  left: 50%; /* Center the snackbar */\\r\\n  bottom: 30px; /* 30px from the bottom */\\r\\n}\\r\\n\\r\\n/* Show the snackbar when clicking on a button (class added with JavaScript) */\\r\\n#snackbar.show {\\r\\n  visibility: visible; /* Show the snackbar */\\r\\n\\r\\n/* Add animation: Take 0.5 seconds to fade in and out the snackbar. \\r\\nHowever, delay the fade out process for 2.5 seconds */\\r\\n  -webkit-animation: fadein 0.5s, fadeout 0.5s 2.5s;\\r\\n  animation: fadein 0.5s, fadeout 0.5s 2.5s;\\r\\n}\\r\\n\\r\\n/* Animations to fade the snackbar in and out */\\r\\n@-webkit-keyframes fadein {\\r\\n  from {bottom: 0; opacity: 0;} \\r\\n  to {bottom: 30px; opacity: 1;}\\r\\n}\\r\\n\\r\\n@keyframes fadein {\\r\\n  from {bottom: 0; opacity: 0;}\\r\\n  to {bottom: 30px; opacity: 1;}\\r\\n}\\r\\n\\r\\n@-webkit-keyframes fadeout {\\r\\n  from {bottom: 30px; opacity: 1;} \\r\\n  to {bottom: 0; opacity: 0;}\\r\\n}\\r\\n\\r\\n@keyframes fadeout {\\r\\n  from {bottom: 30px; opacity: 1;}\\r\\n  to {bottom: 0; opacity: 0;}\\r\\n}\\r\\n\\r\\n#selectType{\\r\\n  display:none;\\r\\n  text-align: center;\\r\\n}\"\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/app/showmeasurement/show.Measurement.style.css\n// module id = ./src/app/showmeasurement/show.Measurement.style.css\n// module chunks = 17","module.exports = \"<h1>Add Measurement Form</h1>\\r\\n<div id=\\\"snackbar\\\"></div>\\r\\n\\r\\n<div class=\\\"container\\\">\\r\\n\\r\\n  <div class=\\\"row\\\">\\r\\n    <div class=\\\"col-md-6 col-lg-6 col-sm-6 offset-lg-3 offset-md-3 offset-sm-3 common-form\\\">\\r\\n      <div class=\\\"form-group\\\">\\r\\n        \\r\\n                <label for=\\\"normal-field\\\" class=\\\"col-form-label\\\">Enter Contact Name</label>\\r\\n        \\r\\n                <input type=\\\"text\\\" [(ngModel)]=\\\"newMeasurement.CustomerContactName\\\" id=\\\"normal-field\\\" class=\\\"form-control custom-inputs\\\"\\r\\n                  placeholder=\\\"Please Enter Customer Contact Name\\\">\\r\\n        \\r\\n              </div>\\r\\n              <div class=\\\"form-group\\\">\\r\\n                <button (click)=\\\"searchByName()\\\" class=\\\"btn btn-primary\\\">Search</button>\\r\\n              </div>\\r\\n      <div class=\\\"form-group\\\">\\r\\n\\r\\n        <label for=\\\"normal-field\\\" class=\\\"col-form-label\\\">Enter Contact Number</label>\\r\\n\\r\\n        <input type=\\\"text\\\" [(ngModel)]=\\\"newMeasurement.CustomerContactNumber\\\" id=\\\"normal-field\\\" class=\\\"form-control custom-inputs\\\"\\r\\n          placeholder=\\\"Please Enter Customer Contact Number\\\">\\r\\n\\r\\n      </div>\\r\\n\\r\\n      <div class=\\\"form-group\\\">\\r\\n        <button (click)=\\\"search()\\\" class=\\\"btn btn-primary\\\">Search</button>\\r\\n      </div>\\r\\n\\r\\n\\r\\n      <div class=\\\"form-group\\\">\\r\\n        <select (change)=\\\"getcutomerId($event.target.value)\\\">\\r\\n          <option disabled selected>Select Customers</option>\\r\\n          <option *ngFor='let customer of customers' value={{customer._id}}>\\r\\n            {{customer.FullName}}\\r\\n          </option>\\r\\n        </select>\\r\\n\\r\\n        <select class=\\\"measurementsType\\\" (change)=\\\"getForms($event.target.value)\\\">\\r\\n          <option disabled selected>Select Option</option>\\r\\n          <option value=\\\"Shalwar Kameez\\\">Shalwar Kameez</option>\\r\\n          <option value=\\\"Coat\\\">Coat</option>\\r\\n          <option value=\\\"Sherwani\\\">Sherwani</option>\\r\\n          <option value=\\\"Waist Coat\\\">Waist Coat</option>\\r\\n          <option value=\\\"Pant\\\">Pant</option>\\r\\n          <option value=\\\"Trouser\\\">Trouser</option>\\r\\n\\r\\n        </select>\\r\\n      </div>\\r\\n\\r\\n  <!--     <div class=\\\"row\\\" id=\\\"selectType\\\">\\r\\n        <h1 class=\\\"record-text\\\">Record Measurements for:</h1>\\r\\n       \\r\\n      </div> -->\\r\\n    </div>\\r\\n  </div>\\r\\n\\r\\n  <div class=\\\"row row-2\\\">\\r\\n\\r\\n    </div>\\r\\n   \\r\\n    <div class=\\\"table-responsive\\\" *ngIf=\\\"WaistCoat\\\">          \\r\\n      <table class=\\\"table table-bordered table-striped\\\">\\r\\n        <thead>\\r\\n          <tr>\\r\\n            <th>#</th>\\r\\n            <th>Length</th>\\r\\n            <th>Chest</th>\\r\\n            <th>Waist</th>\\r\\n            <th>Hip</th>\\r\\n            <th>Shoulder</th>\\r\\n            <th>Neck</th>\\r\\n            <th>HB</th>\\r\\n            <th>CB</th>\\r\\n            </tr>\\r\\n        </thead>\\r\\n        <tbody>\\r\\n          <tr *ngFor=\\\"let order of MultipleMeasurement;let i=index\\\">\\r\\n            <td>{{i}}</td>\\r\\n            <td>{{order.CoatLength}}</td>\\r\\n            <td>{{order.CoatChest}}</td>\\r\\n            <td>{{order.CoatWaist}}</td>\\r\\n            <td>{{order.CoatHip}}</td>\\r\\n            <td>{{order.CoatShoulder}}</td>\\r\\n            <td>{{order.CoatNeck}}</td>\\r\\n            <td>{{order.CoatHB}}</td>\\r\\n            <td>{{order.CoatCB}}</td>\\r\\n           \\r\\n          </tr>\\r\\n        </tbody>\\r\\n      </table>\\r\\n      </div>\\r\\n \\r\\n\\r\\n    <div class=\\\"table-responsive\\\" *ngIf=\\\"ShalwarKameez\\\">          \\r\\n    <table class=\\\"table table-bordered table-striped\\\">\\r\\n      <thead>\\r\\n        <tr>\\r\\n          <th>#</th>\\r\\n          <th>Bottom</th>\\r\\n          <th>SLength</th>\\r\\n          <th>Bysep</th>\\r\\n          <th>Neck</th>\\r\\n          <th>Shoulder</th>\\r\\n          <th>Sleeve</th>\\r\\n          <th>Hip</th>\\r\\n          <th>Waist</th>\\r\\n          <th>Chest</th>\\r\\n          <th>Length</th>\\r\\n        </tr>\\r\\n      </thead>\\r\\n      <tbody>\\r\\n        <tr *ngFor=\\\"let order of MultipleMeasurement;let i=index\\\">\\r\\n          <td>{{i}}</td>\\r\\n          <td>{{order.ShalwarKameezBottom}}</td>\\r\\n          <td>{{order.ShalwarKameezSLength}}</td>\\r\\n          <td>{{order.ShalwarKameezBysep}}</td>\\r\\n          <td>{{order.ShalwarKameezNeck}}</td>\\r\\n          <td>{{order.ShalwarKameezShoulder}}</td>\\r\\n          <td>{{order.ShalwarKameezSleeve}}</td>\\r\\n          <td>{{order.ShalwarKameezHip}}</td>\\r\\n          <td>{{order.ShalwarKameezWaist}}</td>\\r\\n          <td>{{order.ShalwarKameezChest}}</td>\\r\\n          <td>{{order.ShalwarKameezLength}}</td>\\r\\n        </tr>\\r\\n      </tbody>\\r\\n    </table>\\r\\n    </div>\\r\\n\\r\\n    <div class=\\\"table-responsive\\\" *ngIf=\\\"Pant\\\">          \\r\\n      <table class=\\\"table table-bordered table-striped\\\">\\r\\n        <thead>\\r\\n          <tr>\\r\\n            <th>#</th>\\r\\n            <th>Bottom</th>\\r\\n            <th>Hip</th>\\r\\n            <th>Inside</th>\\r\\n            <th>Knee</th>\\r\\n            <th>Length</th>\\r\\n            <th>Waist</th>\\r\\n          </tr>\\r\\n        </thead>\\r\\n        <tbody>\\r\\n          <tr *ngFor=\\\"let order of MultipleMeasurement;let i=index\\\">\\r\\n            <td>{{i}}</td>\\r\\n            <td>{{order.PentBottom}}</td>\\r\\n            <td>{{order.PentHip}}</td>\\r\\n            <td>{{order.PentInside}}</td>\\r\\n            <td>{{order.PentKnee}}</td>\\r\\n            <td>{{order.PentLength}}</td>\\r\\n            <td>{{order.PentWaist}}</td>\\r\\n           \\r\\n          </tr>\\r\\n        </tbody>\\r\\n      </table>\\r\\n      </div>\\r\\n\\r\\n      <div class=\\\"table-responsive\\\" *ngIf=\\\"Coat\\\">          \\r\\n        <table class=\\\"table table-bordered table-striped\\\">\\r\\n          <thead>\\r\\n            <tr>\\r\\n              <th>#</th>\\r\\n              <th>Bottom</th>\\r\\n              <th>SLength</th>\\r\\n              <th>Bysep</th>\\r\\n              <th>Neck</th>\\r\\n              <th>Shoulder</th>\\r\\n              <th>Sleeve</th>\\r\\n              <th>Hip</th>\\r\\n              <th>Waist</th>\\r\\n              <th>Chest</th>\\r\\n              <th>Length</th>\\r\\n            </tr>\\r\\n          </thead>\\r\\n          <tbody>\\r\\n            <tr *ngFor=\\\"let order of MultipleMeasurement;let i=index\\\">\\r\\n              <td>{{i}}</td>\\r\\n              <td>{{order.CoatBysep}}</td>\\r\\n              <td>{{order.CoatCB}}</td>\\r\\n              <td>{{order.CoatChest}}</td>\\r\\n              <td>{{order.CoatHB}}</td>\\r\\n              <td>{{order.CoatHip}}</td>\\r\\n              <td>{{order.CoatLength}}</td>\\r\\n              <td>{{order.CoatNeck}}</td>\\r\\n              <td>{{order.CoatShoulder}}</td>\\r\\n              <td>{{order.CoatSleeve}}</td>\\r\\n              <td>{{order.CoatWaist}}</td>\\r\\n            </tr>\\r\\n          </tbody>\\r\\n        </table>\\r\\n        </div>\\r\\n\\r\\n        <div class=\\\"table-responsive\\\" *ngIf=\\\"Sherwani\\\">          \\r\\n          <table class=\\\"table table-bordered table-striped\\\">\\r\\n            <thead>\\r\\n              <tr>\\r\\n                <th>#</th>\\r\\n                <th>Sep</th>\\r\\n                <th>CB</th>\\r\\n                <th>Chest</th>\\r\\n                <th>HB</th>\\r\\n                <th>Hip</th>\\r\\n                <th>Length</th>\\r\\n                <th>Shoulder</th>\\r\\n                <th>Sleeve</th>\\r\\n                <th>Waist</th>\\r\\n              </tr>\\r\\n            </thead>\\r\\n            <tbody>\\r\\n              <tr *ngFor=\\\"let order of MultipleMeasurement;let i=index\\\">\\r\\n                <td>{{i}}</td>\\r\\n                <td>{{order.SherwaniBysep}}</td>\\r\\n                <td>{{order.SherwaniCB}}</td>\\r\\n                <td>{{order.SherwaniChest}}</td>\\r\\n                <td>{{order.SherwaniHB}}</td>\\r\\n                <td>{{order.SherwaniHip}}</td>\\r\\n                <td>{{order.SherwaniLength}}</td>\\r\\n                <td>{{order.SherwaniShoulder}}</td>\\r\\n                <td>{{order.SherwaniSleeve}}</td>\\r\\n                <td>{{order.SherwaniWaist}}</td>\\r\\n              </tr>\\r\\n            </tbody>\\r\\n          </table>\\r\\n          </div>\\r\\n\\r\\n          \\r\\n        <div class=\\\"table-responsive\\\" *ngIf=\\\"Trouser\\\">          \\r\\n          <table class=\\\"table table-bordered table-striped\\\">\\r\\n            <thead>\\r\\n              <tr>\\r\\n                <th>#</th>\\r\\n                <th>Bottom</th>\\r\\n                <th>Hip</th>\\r\\n                <th>Inside</th>\\r\\n                <th>Knee</th>\\r\\n                <th>Length</th>\\r\\n                <th>Waist</th>\\r\\n              </tr>\\r\\n            </thead>\\r\\n            <tbody>\\r\\n              <tr *ngFor=\\\"let order of MultipleMeasurement;let i=index\\\">\\r\\n                <td>{{i}}</td>\\r\\n                <td>{{order.TrouserBottom}}</td>\\r\\n                <td>{{order.TrouserHip}}</td>\\r\\n                <td>{{order.TrouserInside}}</td>\\r\\n                <td>{{order.TrouserKnee}}</td>\\r\\n                <td>{{order.TrouserLength}}</td>\\r\\n                <td>{{order.TrouserWaist}}</td>\\r\\n                \\r\\n              </tr>\\r\\n            </tbody>\\r\\n          </table>\\r\\n          </div>\\r\\n\\r\\n</div>\"\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/app/showmeasurement/show.Measurement.template.html\n// module id = ./src/app/showmeasurement/show.Measurement.template.html\n// module chunks = 17","export class EmployeeRole {\r\n    RoleID: number\r\n    Name: string\r\n}\n\n\n// WEBPACK FOOTER //\n// node_modules/angular2-template-loader!./~/string-replace-loader?{\"search\":\"(System|SystemJS)(.*[/n/r]/s*/.|/.)import/((.+)/)\",\"replace\":\"$1.import($3).then(mod => (mod.__esModule && mod.default) ? mod.default : mod)\",\"flags\":\"g\"}!./src/models/employeeRole.ts","    \r\n\r\n    export class Measurement {\r\n        _id: string;\r\n        CustomerId: string;\r\n        ShalwarKameezBottom?: number;\r\n        ShalwarKameezLength?: number;\r\n        ShalwarKameezSLength?: number;\r\n        ShalwarKameezBysep?: number;\r\n        ShalwarKameezNeck?: number;\r\n        ShalwarKameezShoulder?: number;\r\n        ShalwarKameezSleeve?: number;\r\n        ShalwarKameezHip?: number;\r\n        ShalwarKameezWaist?: number;\r\n        ShalwarKameezChest?: number;\r\n        ShalwarKameezMeasurementTakenBy:String;\r\n        __v: number;\r\n        TrouserInside?: number;\r\n        TrouserBottom?: number;\r\n        TrouserKnee?: number;\r\n        TrouserLength?: number;\r\n        TrouserHip?: number;\r\n        TrouserWaist?: number;\r\n        PentInside?: number;\r\n        PentKnee?: number;\r\n        PentLength?: number;\r\n        PentHip?: number;\r\n        PentWaist?: number;\r\n        WaistCoatCB?: number;\r\n        WaistCoatHB?: number;\r\n        WaistCoatNeck?: number;\r\n        WaistCoatShoulder?: number;\r\n        WaistCoatHip?: number;\r\n        WaistCoatWaist?: number;\r\n        WaistCoatChest?: number;\r\n        WaistCoatLength?: number;\r\n        SherwaniBottom?: number;\r\n        SherwaniHB?:number;\r\n        SherwaniCB?: number;\r\n        SherwaniBysep?: number;\r\n        SherwaniNeck?: number;\r\n        SherwaniShoulder?: number;\r\n        SherwaniSleeve?: number;\r\n        SherwaniHip?: number;\r\n        SherwaniWaist?: number;\r\n        SherwaniChest?: number;\r\n        SherwaniLength?: number;\r\n        CoatCB?: number;\r\n        CoatHB?: number;\r\n        CoatBysep?: number;\r\n        CoatNeck?: number;\r\n        CoatShoulder?: number;\r\n        CoatSleeve?: number;\r\n        CoatHip?: number;\r\n        CoatWaist?: number;\r\n        CoatChest?: number;\r\n        CoatMeasurementTakenBy:String;    \r\n        SherwaniMeasurementTakenBy:String; \r\n        WaistCoatMeasurementTakenBy:String;    \r\n        PentMeasurementTakenBy:String;\r\n        TrouserMeasurementTakenBy:String;\r\n        ShawlLength:string;\r\n        ShawlWidth:string;\r\n    }\r\n\r\n\r\n\n\n\n// WEBPACK FOOTER //\n// node_modules/angular2-template-loader!./~/string-replace-loader?{\"search\":\"(System|SystemJS)(.*[/n/r]/s*/.|/.)import/((.+)/)\",\"replace\":\"$1.import($3).then(mod => (mod.__esModule && mod.default) ? mod.default : mod)\",\"flags\":\"g\"}!./src/models/measurement.ts","import { Injectable } from '@angular/core';\r\nimport { Http, Response } from '@angular/http';\r\nimport { Headers, RequestOptions } from '@angular/http';\r\nimport { Observable } from 'rxjs/Observable';\r\nimport 'rxjs/add/operator/map';\r\nimport 'rxjs/add/operator/do';\r\nimport { Customer } from './../models/customer';\r\nimport { CustomerResponse } from './../models/customerResponse';\r\nimport {Server} from './../utilities/Server';\r\n\r\n\r\n@Injectable()\r\nexport class CustomerService {\r\n\r\n    private baseURL: String;\r\n\r\n    private _addCustomerURL = 'customers/addCustomer';\r\n    private _getAllCustomersURL = 'customers/addCustomer';\r\n    private getCustomersByContactNumberURL = 'customers/getCustomerAndReferancesByContactNumber?ContactNumber=';\r\n    private getMeasurementURL = 'customers/getMeasurementByCustomerId?CustomerId=';\r\n    private getAllCustomerNameURL = 'customers/getCustomersByName?FullName=';\r\n    private _addPattern = \"customers/addCustomerPattern\";\r\n    \r\n   constructor(private _http: Http) {\r\n        var server = new Server();\r\n        this.baseURL = server.getServerURL();\r\n     }\r\n\r\n\r\n\r\n   // private _addCustomerURL = 'http://localhost:3100/customers/addCustomer';\r\n  //  private _addCustomerURL = \"https://ssbotique.herokuapp.com/customers/addCustomer\";\r\n  //  private _getAllCustomersURL = 'https://ssbotique.herokuapp.com/customers/getAllCustomers';\r\n   // private getCustomersByContactNumberURL = 'https://ssbotique.herokuapp.com/customers/getCustomerAndReferancesByContactNumber?ContactNumber=';\r\n   // private getMeasurementURL = 'https://ssbotique.herokuapp.com/customers/getMeasurementByCustomerId?CustomerId=';\r\n   // private getAllCustomerNameURL ='https://ssbotique.herokuapp.com/customers/getCustomersByName?FullName=';\r\n    \r\n    \r\n\r\n\r\n    public addCustomer(customer: Customer) {\r\n        let headers = new Headers({ 'Content-Type': 'application/json' });\r\n        let options = new RequestOptions({ headers: headers });\r\n        console.log(this.baseURL);\r\n        console.log(\"Customer Received in Service\");\r\n        console.log(customer);\r\n        return this._http.post(this.baseURL + this._addCustomerURL, customer, options)\r\n        .map(res => res.json());\r\n    }\r\n    \r\n    public getAllCustomers(): Observable<CustomerResponse> {\r\n        return this._http.get(this.baseURL + this._getAllCustomersURL)\r\n         .map((response: Response) => <CustomerResponse> response.json())\r\n         .do(data => console.log(JSON.stringify(data)));\r\n     }\r\n\r\n    public getCustomersByContactNumber(contactNumber:string): Observable<CustomerResponse> {\r\n        return this._http.get(this.baseURL + this.getCustomersByContactNumberURL+contactNumber)\r\n         .map((response: Response) => <CustomerResponse> response.json())\r\n         .do(data => console.log(JSON.stringify(data)));\r\n     }\r\n\r\n     public getCustomersByFullName(FullName : string){\r\n         console.log(\"Its get in service Full Name ID \", FullName);\r\n        var obj = {id: FullName};\r\n        console.log(\"object is \" + obj);\r\n        return this._http.get(this.baseURL + this.getAllCustomerNameURL + FullName)\r\n        .map((response: Response) => <CustomerResponse> response.json())\r\n        .do(data => console.log(JSON.stringify(data)));\r\n     }\r\n\r\n     public addPatternService(customer_id : string){\r\n        var obj =  {id:customer_id};\r\n        console.log(\"Object is\");\r\n        console.log(obj);\r\n        let headers = new Headers({ 'Content-Type': 'application/json' });\r\n        let options = new RequestOptions({ headers: headers });\r\n        console.log(\"Base URL is \"+this.baseURL);\r\n        return this._http.post(this.baseURL + this._addPattern, obj, options)\r\n        .map(res => res.json())\r\n        .do(data => console.log(JSON.stringify(data)));\r\n     }\r\n\r\n\r\n     public getCustomersByContactName(FullName:string): Observable<CustomerResponse> {\r\n        return this._http.get(this.baseURL + this.getAllCustomerNameURL+FullName)\r\n         .map((response: Response) => <CustomerResponse> response.json())\r\n         .do(data => console.log(JSON.stringify(data)));\r\n     }\r\n\r\n    private extractData(res: Response) {\r\n        let body = res.json();\r\n        console.log(\"Extract Data\");\r\n        console.log(body);\r\n        return body.data || {};\r\n    }\r\n\r\n    GetMeasurementById(CustomerId){\r\n        \r\n        let headers = new Headers();\r\n\r\n        headers.append('Content-Type', 'application/json; charset=UTF-8');\r\n        return this._http.get(this.baseURL+this.getMeasurementURL+CustomerId, { headers: headers })\r\n            .map(res => res.json());\r\n    }\r\n\r\n}\n\n\n// WEBPACK FOOTER //\n// node_modules/angular2-template-loader!./~/string-replace-loader?{\"search\":\"(System|SystemJS)(.*[/n/r]/s*/.|/.)import/((.+)/)\",\"replace\":\"$1.import($3).then(mod => (mod.__esModule && mod.default) ? mod.default : mod)\",\"flags\":\"g\"}!./src/services/customer.Service.ts","import { Injectable } from '@angular/core';\r\nimport { Http, Response } from '@angular/http';\r\nimport { Headers, RequestOptions } from '@angular/http';\r\nimport { Observable } from 'rxjs/Observable';\r\nimport 'rxjs/add/operator/map';\r\nimport 'rxjs/add/operator/do';\r\nimport {Server} from './../utilities/Server';\r\nimport { Employee } from './../models/employee';\r\nimport { EmployeeRole } from './../models/employeeRole';\r\n\r\n@Injectable()\r\nexport class EmployeeService {\r\n    \r\n    private baseURL: String;\r\n    private _addEmployeeURL = 'employees/addEmployee';\r\n    private getEmployeeRolesURL = 'app/employees/EmployeeRole.js';\r\n    \r\n    constructor(private _http: Http) { \r\n        var server = new Server();\r\n        this.baseURL = server.getServerURL();\r\n    }\r\n\r\n\r\n    public addEmployee(employee: Employee): Observable<Employee> {\r\n        let headers = new Headers({ 'Content-Type': 'application/json' });\r\n        let options = new RequestOptions({ headers: headers });\r\n        return this._http.post(this.baseURL + this._addEmployeeURL, employee, options)\r\n            .map(this.extractData);\r\n    }\r\n\r\n    public getEmployeeRoles(): EmployeeRole[] {\r\n        var employeeRoles=[];\r\n     var employeeRole = new EmployeeRole();\r\n     employeeRole.Name = \"Master\";\r\n     employeeRole.RoleID = 1; \r\n     employeeRoles.push(employeeRole);\r\n     employeeRole = new EmployeeRole(); \r\n     employeeRole.Name = \"Shoe Maker\";\r\n     employeeRole.RoleID = 2; \r\n     employeeRoles.push(employeeRole);\r\n     employeeRole = new EmployeeRole(); \r\n     employeeRole.Name = \"Sticher\";\r\n     employeeRole.RoleID = 3; \r\n     employeeRoles.push(employeeRole);\r\n     employeeRole = new EmployeeRole(); \r\n     employeeRole.Name = \"Embroidery worker\";\r\n     employeeRole.RoleID = 4; \r\n     employeeRoles.push(employeeRole);\r\n     return employeeRoles;\r\n    }\r\n\r\n    private extractData(res: Response) {\r\n        let body = res.json();\r\n        console.log(\"Extract Data\");\r\n        console.log(body);\r\n        return body.data || {};\r\n    }   \r\n\r\n\r\n    getEmployees(){\r\n        \r\n        let headers = new Headers();\r\n\r\n        headers.append('Content-Type', 'application/json; charset=UTF-8');\r\n        return this._http.get(this.baseURL + \"employees/getAllEmployees\", { headers: headers })\r\n            .map(res => res.json());\r\n    }\r\n\r\n     login(username,password){\r\n        var data;\r\n\r\n        data = {UserName:username,Password:password};\r\n        let headers = new Headers();\r\n\r\n        headers.append('Content-Type', 'application/json; charset=UTF-8');\r\n        return this._http.post(this.baseURL+ \"employees/login\", data, { headers: headers })\r\n            .map(res => res.json());\r\n    } \r\n\r\n    getAssignedItems(assignedTo){\r\n\r\n        var data;\r\n\r\n        data = {AssignedTo:assignedTo};\r\n        let headers = new Headers();\r\n\r\n        headers.append('Content-Type', 'application/json; charset=UTF-8');\r\n        return this._http.post(this.baseURL+ \"employees/getMyOrderItems\", data, { headers: headers })\r\n            .map(res => res.json());\r\n\r\n    }\r\n\r\n}\n\n\n// WEBPACK FOOTER //\n// node_modules/angular2-template-loader!./~/string-replace-loader?{\"search\":\"(System|SystemJS)(.*[/n/r]/s*/.|/.)import/((.+)/)\",\"replace\":\"$1.import($3).then(mod => (mod.__esModule && mod.default) ? mod.default : mod)\",\"flags\":\"g\"}!./src/services/employee.Service.ts","import { Injectable } from '@angular/core';\r\nimport { Http, Response } from '@angular/http';\r\nimport { Headers, RequestOptions } from '@angular/http';\r\nimport { Observable } from 'rxjs/Observable';\r\nimport 'rxjs/add/operator/map';\r\nimport 'rxjs/add/operator/do';\r\nimport { Measurement } from './../models/measurement';\r\nimport {Server} from './../utilities/Server';\r\n\r\n@Injectable()\r\nexport class MeasurementService {\r\n\r\n    private _addMeasurmentURL = 'customers/addMeasurement';\r\n    private baseURL:String ;\r\n    constructor(private _http: Http) {\r\n        var server = new Server();\r\n        this.baseURL = server.getServerURL();\r\n     }\r\n\r\n    public addMeasurement(measurement: Measurement){\r\n        console.log(\"Add Measurement is called in Service\");\r\n        console.log(measurement);\r\n        let headers = new Headers({ 'Content-Type': 'application/json' });\r\n        let options = new RequestOptions({ headers: headers });\r\n        return this._http.post(this.baseURL + this._addMeasurmentURL, measurement, options)\r\n        .map(res => res.json());\r\n    }\r\n\r\n    private extractData(res: Response) {\r\n        let body = res.json();\r\n        console.log(\"Extract Data\");\r\n        console.log(body);\r\n        return body.data || {};\r\n    }\r\n\r\n}\n\n\n// WEBPACK FOOTER //\n// node_modules/angular2-template-loader!./~/string-replace-loader?{\"search\":\"(System|SystemJS)(.*[/n/r]/s*/.|/.)import/((.+)/)\",\"replace\":\"$1.import($3).then(mod => (mod.__esModule && mod.default) ? mod.default : mod)\",\"flags\":\"g\"}!./src/services/measurement.Service.ts","export  class Server\r\n{\r\n    public getServerURL():string\r\n    {\r\n       // return \"http://localhost:3100/\";\r\n       return \"https://botiquetest.azurewebsites.net/\";\r\n    }\r\n}\n\n\n// WEBPACK FOOTER //\n// node_modules/angular2-template-loader!./~/string-replace-loader?{\"search\":\"(System|SystemJS)(.*[/n/r]/s*/.|/.)import/((.+)/)\",\"replace\":\"$1.import($3).then(mod => (mod.__esModule && mod.default) ? mod.default : mod)\",\"flags\":\"g\"}!./src/utilities/Server.ts"],"mappings":";;;;;;AAAA;AACA;AACA;AACA;AACA;AACA;;;;;;;;ACLA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;AC/GA;AAGA;AACA;AACA;AACA;AAaA;AACA;AAAA;AACA;AAAA;AAEA;AAEA;AAOA;AACA;AACA;AACA;AACA;AACA;AAfA;AAicA;AAAA;AACA;AACA;AACA;AACA;AACA;;AAAA;AA2cA;;AAAA;AAzcA;;;;;;;;;;;ACnBA;AACA;AACA;AACA;AAEA;AAEA;AACA;AACA;AAYA;AAAA;AAEA;AADA;AAXA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAAA;AAGA;AAAA;AAFA;AAEA;;;;;;;;ACvBA;;;;;;;ACAA;;;;;;;;;ACAA;AAAA;AAGA;AAAA;AAAA;AAHA;;;;;;;;;;ACEA;AAAA;AA6DA;AAAA;AAAA;AA7DA;;;;;;;;;;ACFA;AACA;AACA;AAEA;AACA;AAGA;AAIA;AAWA;AAAA;AAPA;AACA;AACA;AACA;AACA;AACA;AAGA;AACA;AACA;AAIA;AACA;AACA;AACA;AACA;AACA;AAKA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAGA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AAEA;AAEA;AACA;AACA;AACA;AA7FA;AAAA;;AAAA;AA+FA;;AAAA;AA9FA;;;;;;;;;;ACZA;AACA;AACA;AAEA;AACA;AACA;AAEA;AAGA;AAMA;AAAA;AAHA;AACA;AAGA;AACA;AACA;AAGA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAGA;AAEA;AAEA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AAEA;AAEA;AAEA;AACA;AAEA;AACA;AACA;AAEA;AAhFA;AAAA;;AAAA;AAkFA;;AAAA;AAjFA;;;;;;;;;;ACXA;AACA;AACA;AAEA;AACA;AAEA;AAGA;AAIA;AAAA;AAFA;AAGA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAxBA;AAAA;;AAAA;AA0BA;;AAAA;AAzBA;;;;;;;;;;ACVA;AAAA;AAOA;AALA;AAEA;AACA;AACA;AACA;AAAA;AAPA;;;;;","sourceRoot":""}