{"version":3,"file":"1.chunk.js","sources":["webpack:///./~/rxjs/add/operator/do.js?191b","webpack:///./~/rxjs/operator/do.js?a264","webpack:///./src/app/login/login.component.ts","webpack:///./src/app/login/login.module.ts","webpack:///./src/app/login/login.template.html","webpack:///./src/models/employeeRole.ts","webpack:///./src/models/user.ts?e830","webpack:///./src/services/employee.Service.ts","webpack:///./src/utilities/Server.ts?7466"],"sourcesContent":["\"use strict\";\nvar Observable_1 = require('../../Observable');\nvar do_1 = require('../../operator/do');\nObservable_1.Observable.prototype.do = do_1._do;\nObservable_1.Observable.prototype._do = do_1._do;\n//# sourceMappingURL=do.js.map\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/rxjs/add/operator/do.js\n// module id = ./node_modules/rxjs/add/operator/do.js\n// module chunks = 1 8 9 10 12 14 16 17 20 21 22 23","\"use strict\";\nvar __extends = (this && this.__extends) || function (d, b) {\n    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n    function __() { this.constructor = d; }\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n};\nvar Subscriber_1 = require('../Subscriber');\n/**\n * Perform a side effect for every emission on the source Observable, but return\n * an Observable that is identical to the source.\n *\n * <span class=\"informal\">Intercepts each emission on the source and runs a\n * function, but returns an output which is identical to the source.</span>\n *\n * <img src=\"./img/do.png\" width=\"100%\">\n *\n * Returns a mirrored Observable of the source Observable, but modified so that\n * the provided Observer is called to perform a side effect for every value,\n * error, and completion emitted by the source. Any errors that are thrown in\n * the aforementioned Observer or handlers are safely sent down the error path\n * of the output Observable.\n *\n * This operator is useful for debugging your Observables for the correct values\n * or performing other side effects.\n *\n * Note: this is different to a `subscribe` on the Observable. If the Observable\n * returned by `do` is not subscribed, the side effects specified by the\n * Observer will never happen. `do` therefore simply spies on existing\n * execution, it does not trigger an execution to happen like `subscribe` does.\n *\n * @example <caption>Map every every click to the clientX position of that click, while also logging the click event</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var positions = clicks\n *   .do(ev => console.log(ev))\n *   .map(ev => ev.clientX);\n * positions.subscribe(x => console.log(x));\n *\n * @see {@link map}\n * @see {@link subscribe}\n *\n * @param {Observer|function} [nextOrObserver] A normal Observer object or a\n * callback for `next`.\n * @param {function} [error] Callback for errors in the source.\n * @param {function} [complete] Callback for the completion of the source.\n * @return {Observable} An Observable identical to the source, but runs the\n * specified Observer or callback(s) for each item.\n * @method do\n * @name do\n * @owner Observable\n */\nfunction _do(nextOrObserver, error, complete) {\n    return this.lift(new DoOperator(nextOrObserver, error, complete));\n}\nexports._do = _do;\nvar DoOperator = (function () {\n    function DoOperator(nextOrObserver, error, complete) {\n        this.nextOrObserver = nextOrObserver;\n        this.error = error;\n        this.complete = complete;\n    }\n    DoOperator.prototype.call = function (subscriber, source) {\n        return source._subscribe(new DoSubscriber(subscriber, this.nextOrObserver, this.error, this.complete));\n    };\n    return DoOperator;\n}());\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nvar DoSubscriber = (function (_super) {\n    __extends(DoSubscriber, _super);\n    function DoSubscriber(destination, nextOrObserver, error, complete) {\n        _super.call(this, destination);\n        var safeSubscriber = new Subscriber_1.Subscriber(nextOrObserver, error, complete);\n        safeSubscriber.syncErrorThrowable = true;\n        this.add(safeSubscriber);\n        this.safeSubscriber = safeSubscriber;\n    }\n    DoSubscriber.prototype._next = function (value) {\n        var safeSubscriber = this.safeSubscriber;\n        safeSubscriber.next(value);\n        if (safeSubscriber.syncErrorThrown) {\n            this.destination.error(safeSubscriber.syncErrorValue);\n        }\n        else {\n            this.destination.next(value);\n        }\n    };\n    DoSubscriber.prototype._error = function (err) {\n        var safeSubscriber = this.safeSubscriber;\n        safeSubscriber.error(err);\n        if (safeSubscriber.syncErrorThrown) {\n            this.destination.error(safeSubscriber.syncErrorValue);\n        }\n        else {\n            this.destination.error(err);\n        }\n    };\n    DoSubscriber.prototype._complete = function () {\n        var safeSubscriber = this.safeSubscriber;\n        safeSubscriber.complete();\n        if (safeSubscriber.syncErrorThrown) {\n            this.destination.error(safeSubscriber.syncErrorValue);\n        }\n        else {\n            this.destination.complete();\n        }\n    };\n    return DoSubscriber;\n}(Subscriber_1.Subscriber));\n//# sourceMappingURL=do.js.map\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/rxjs/operator/do.js\n// module id = ./node_modules/rxjs/operator/do.js\n// module chunks = 1 8 9 10 12 14 16 17 20 21 22 23","import { Component, ViewEncapsulation } from '@angular/core';\r\nimport {EmployeeService} from '../../services/employee.Service';\r\nimport { Router } from '@angular/router';\r\nimport {UserModel} from '../../models/user';\r\n\r\n@Component({\r\n  selector: 'login',\r\n  styles: [ require('./login.style.scss') ],\r\n  template: require('./login.template.html'),\r\n  encapsulation: ViewEncapsulation.None,\r\n  providers:[EmployeeService],\r\n  host: {\r\n    class: 'login-page app'\r\n  }\r\n})\r\nexport class Login {\r\n  public Email: string = \"\";\r\n  public Password: string = \"\";\r\n  public errorMessage:string = \"\";\r\n  public router:Router;\r\n\r\n  public userObject:UserModel;\r\n\r\n  constructor(public _employee:EmployeeService, router: Router) {\r\n    this.router = router;\r\n  }\r\n\r\n  EnterKey(event) {\r\n\r\n    if (event.keyCode == 13) {\r\n\r\n        this.login();\r\n      \r\n\r\n    }\r\n\r\n  }\r\n\r\n  login() {\r\n     this.errorMessage = \"\";\r\n    if (this.Email != \"\" && this.Email !== undefined && this.Password != \"\" && this.Password !== undefined) {\r\n      this._employee.login(this.Email, this.Password).subscribe(response=>{\r\n        console.log(response);\r\n\r\n      \r\n\r\n        if(response.code != 200){\r\n          this.errorMessage = response.message;\r\n\r\n        }\r\n        else{\r\n          this.errorMessage = response.message;\r\n          localStorage.setItem('user', JSON.stringify(response.data));\r\n          this.userObject = JSON.parse(localStorage.getItem(\"user\"))\r\n          if(this.userObject.EmployeeRole == 1){\r\n            setTimeout(() => {\r\n              this.router.navigate([\"app/customers\"]);\r\n            }, 1000);\r\n          }else{\r\n            setTimeout(() => {\r\n              this.router.navigate(['app/orderdetail']);\r\n            }, 1000);\r\n          }\r\n         \r\n          //\r\n        }\r\n      });\r\n    }\r\n    else{\r\n      this.errorMessage = \"User Name or Password is Required\";\r\n    } \r\n  }\r\n\r\n  ngOnInit(){\r\n    this.userObject = new UserModel();\r\n  }\r\n  myFunction() {\r\n    // Get the snackbar DIV\r\n    var x = document.getElementById(\"snackbar\")\r\n\r\n    // Add the \"show\" class to DIV\r\n    x.className = \"show\";\r\n\r\n    // After 3 seconds, remove the show class from DIV\r\n    setTimeout(function(){ x.className = x.className.replace(\"show\", \"\"); }, 3000);\r\n}\r\n\r\n}\r\n\n\n\n// WEBPACK FOOTER //\n// node_modules/angular2-template-loader!./~/string-replace-loader?{\"search\":\"(System|SystemJS)(.*[/n/r]/s*/.|/.)import/((.+)/)\",\"replace\":\"$1.import($3).then(mod => (mod.__esModule && mod.default) ? mod.default : mod)\",\"flags\":\"g\"}!./src/app/login/login.component.ts","import { CommonModule } from '@angular/common';\r\nimport { FormsModule } from '@angular/forms';\r\nimport { NgModule } from '@angular/core';\r\nimport { RouterModule } from '@angular/router';\r\n\r\nimport { Login } from './login.component';\r\n\r\nexport const routes = [\r\n  { path: '', component: Login, pathMatch: 'full' }\r\n];\r\n\r\n@NgModule({\r\n  declarations: [\r\n    Login\r\n  ],\r\n  imports: [\r\n    CommonModule,\r\n    FormsModule,\r\n    RouterModule.forChild(routes),\r\n  ]\r\n})\r\nexport default class LoginModule {\r\n  static routes = routes;\r\n}\r\n\n\n\n// WEBPACK FOOTER //\n// node_modules/angular2-template-loader!./~/string-replace-loader?{\"search\":\"(System|SystemJS)(.*[/n/r]/s*/.|/.)import/((.+)/)\",\"replace\":\"$1.import($3).then(mod => (mod.__esModule && mod.default) ? mod.default : mod)\",\"flags\":\"g\"}!./src/app/login/login.module.ts","module.exports = \"<div class=\\\"container\\\">\\r\\n  <div id=\\\"snackbar\\\"></div>\\r\\n  <main id=\\\"content\\\" class=\\\"widget-login-container\\\" role=\\\"main\\\">\\r\\n    <div class=\\\"row\\\">\\r\\n      <div class=\\\"col-xl-4 col-md-6 col-xs-10 offset-xl-4 offset-md-3 offset-xs-1\\\">\\r\\n        \\r\\n        <section class=\\\"widget widget-login animated fadeInUp\\\">\\r\\n          <header>\\r\\n            <h3>Login to SS Boutique</h3>\\r\\n          </header>\\r\\n          <div class=\\\"widget-body\\\">\\r\\n            <p class=\\\"widget-login-info\\\">\\r\\n              Use Facebook, Twitter or your email to sign in.\\r\\n            </p>\\r\\n            <p class=\\\"widget-login-info\\\">\\r\\n              Don't have an account? Sign up now!\\r\\n            </p>\\r\\n            <form class=\\\"login-form mt-lg\\\">\\r\\n              <div class=\\\"form-group\\\">\\r\\n                <input type=\\\"text\\\" class=\\\"form-control\\\" [(ngModel)]=\\\"Email\\\" name=\\\"Email\\\" id=\\\"exampleInputEmail1\\\" placeholder=\\\"Username\\\">\\r\\n              </div>\\r\\n              <div class=\\\"form-group\\\">\\r\\n                <input class=\\\"form-control\\\" id=\\\"pswd\\\" (keydown)=\\\"EnterKey($event)\\\" type=\\\"password\\\" [(ngModel)]=\\\"Password\\\" name=\\\"Password\\\" placeholder=\\\"Password\\\">\\r\\n              </div>\\r\\n              <div class=\\\"row\\\">\\r\\n                <div class=\\\"col-md-12\\\">\\r\\n                  <p class=\\\"errorMessage\\\" style=\\\"color:red\\\">{{errorMessage}}</p>\\r\\n                </div>\\r\\n              </div>\\r\\n              <div class=\\\"clearfix\\\">\\r\\n                <div class=\\\"btn-toolbar pull-xs-right m-t-1\\\">\\r\\n                  <a class=\\\"btn btn-success my-btn btn-sm\\\" (click)=\\\"login()\\\">Login</a>\\r\\n                </div>\\r\\n              </div>\\r\\n              \\r\\n            </form>\\r\\n          </div>\\r\\n        </section>\\r\\n      </div>\\r\\n    </div>\\r\\n  </main>\\r\\n  <footer class=\\\"page-footer\\\">\\r\\n    2016 &copy; Sing. Admin Dashboard Template.\\r\\n  </footer>\\r\\n</div>\\r\\n\"\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/app/login/login.template.html\n// module id = ./src/app/login/login.template.html\n// module chunks = 1","export class EmployeeRole {\r\n    RoleID: number\r\n    Name: string\r\n}\n\n\n// WEBPACK FOOTER //\n// node_modules/angular2-template-loader!./~/string-replace-loader?{\"search\":\"(System|SystemJS)(.*[/n/r]/s*/.|/.)import/((.+)/)\",\"replace\":\"$1.import($3).then(mod => (mod.__esModule && mod.default) ? mod.default : mod)\",\"flags\":\"g\"}!./src/models/employeeRole.ts","    export class UserModel {\r\n        _id: string;\r\n        EmployeeRole: number;\r\n        Address: string;\r\n        ContactNumber: string;\r\n        FullName: string;\r\n        Email: string;\r\n        __v: number;\r\n        Password: string;\r\n        UserName: string;\r\n    }\r\n\r\n\r\n\r\n\n\n\n// WEBPACK FOOTER //\n// node_modules/angular2-template-loader!./~/string-replace-loader?{\"search\":\"(System|SystemJS)(.*[/n/r]/s*/.|/.)import/((.+)/)\",\"replace\":\"$1.import($3).then(mod => (mod.__esModule && mod.default) ? mod.default : mod)\",\"flags\":\"g\"}!./src/models/user.ts","import { Injectable } from '@angular/core';\r\nimport { Http, Response } from '@angular/http';\r\nimport { Headers, RequestOptions } from '@angular/http';\r\nimport { Observable } from 'rxjs/Observable';\r\nimport 'rxjs/add/operator/map';\r\nimport 'rxjs/add/operator/do';\r\nimport {Server} from './../utilities/Server';\r\nimport { Employee } from './../models/employee';\r\nimport { EmployeeRole } from './../models/employeeRole';\r\n\r\n@Injectable()\r\nexport class EmployeeService {\r\n    \r\n    private baseURL: String;\r\n    private _addEmployeeURL = 'employees/addEmployee';\r\n    private getEmployeeRolesURL = 'app/employees/EmployeeRole.js';\r\n    \r\n    constructor(private _http: Http) { \r\n        var server = new Server();\r\n        this.baseURL = server.getServerURL();\r\n    }\r\n\r\n\r\n    public addEmployee(employee: Employee): Observable<Employee> {\r\n        let headers = new Headers({ 'Content-Type': 'application/json' });\r\n        let options = new RequestOptions({ headers: headers });\r\n        return this._http.post(this.baseURL + this._addEmployeeURL, employee, options)\r\n            .map(this.extractData);\r\n    }\r\n\r\n    public getEmployeeRoles(): EmployeeRole[] {\r\n        var employeeRoles=[];\r\n     var employeeRole = new EmployeeRole();\r\n     employeeRole.Name = \"Master\";\r\n     employeeRole.RoleID = 1; \r\n     employeeRoles.push(employeeRole);\r\n     employeeRole = new EmployeeRole(); \r\n     employeeRole.Name = \"Shoe Maker\";\r\n     employeeRole.RoleID = 2; \r\n     employeeRoles.push(employeeRole);\r\n     employeeRole = new EmployeeRole(); \r\n     employeeRole.Name = \"Sticher\";\r\n     employeeRole.RoleID = 3; \r\n     employeeRoles.push(employeeRole);\r\n     employeeRole = new EmployeeRole(); \r\n     employeeRole.Name = \"Embroidery worker\";\r\n     employeeRole.RoleID = 4; \r\n     employeeRoles.push(employeeRole);\r\n     return employeeRoles;\r\n    }\r\n\r\n    private extractData(res: Response) {\r\n        let body = res.json();\r\n        console.log(\"Extract Data\");\r\n        console.log(body);\r\n        return body.data || {};\r\n    }   \r\n\r\n\r\n    getEmployees(){\r\n        \r\n        let headers = new Headers();\r\n\r\n        headers.append('Content-Type', 'application/json; charset=UTF-8');\r\n        return this._http.get(this.baseURL + \"employees/getAllEmployees\", { headers: headers })\r\n            .map(res => res.json());\r\n    }\r\n\r\n     login(username,password){\r\n        var data;\r\n\r\n        data = {UserName:username,Password:password};\r\n        let headers = new Headers();\r\n\r\n        headers.append('Content-Type', 'application/json; charset=UTF-8');\r\n        return this._http.post(this.baseURL+ \"employees/login\", data, { headers: headers })\r\n            .map(res => res.json());\r\n    } \r\n\r\n    getAssignedItems(assignedTo){\r\n\r\n        var data;\r\n\r\n        data = {AssignedTo:assignedTo};\r\n        let headers = new Headers();\r\n\r\n        headers.append('Content-Type', 'application/json; charset=UTF-8');\r\n        return this._http.post(this.baseURL+ \"employees/getMyOrderItems\", data, { headers: headers })\r\n            .map(res => res.json());\r\n\r\n    }\r\n\r\n}\n\n\n// WEBPACK FOOTER //\n// node_modules/angular2-template-loader!./~/string-replace-loader?{\"search\":\"(System|SystemJS)(.*[/n/r]/s*/.|/.)import/((.+)/)\",\"replace\":\"$1.import($3).then(mod => (mod.__esModule && mod.default) ? mod.default : mod)\",\"flags\":\"g\"}!./src/services/employee.Service.ts","export  class Server\r\n{\r\n    public getServerURL():string\r\n    {\r\n       // return \"http://localhost:3100/\";\r\n       return \"https://ssbotique1.azurewebsites.net/\";\r\n    }\r\n}\n\n\n// WEBPACK FOOTER //\n// node_modules/angular2-template-loader!./~/string-replace-loader?{\"search\":\"(System|SystemJS)(.*[/n/r]/s*/.|/.)import/((.+)/)\",\"replace\":\"$1.import($3).then(mod => (mod.__esModule && mod.default) ? mod.default : mod)\",\"flags\":\"g\"}!./src/utilities/Server.ts"],"mappings":";;;;;;AAAA;AACA;AACA;AACA;AACA;AACA;;;;;;;;ACLA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;AC/GA;AACA;AACA;AACA;AAYA;AAQA;AAAA;AAPA;AACA;AACA;AAMA;AACA;AAEA;AAEA;AAEA;AAGA;AAEA;AAEA;AAAA;AACA;AACA;AACA;AACA;AAIA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AAhFA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAAA;AAyEA;;AAAA;AAxEA;;;;;;;;;;ACfA;AACA;AACA;AACA;AAEA;AAEA;AACA;AACA;AAYA;AAAA;AAEA;AADA;AAXA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAAA;AAGA;AAAA;AAFA;AAEA;;;;;;;;;;;;;;;ACvBA;;;;;;;;;ACAA;AAAA;AAGA;AAAA;AAAA;AAHA;;;;;;;;;;ACAA;AAAA;AAUA;AAAA;AAAA;AAVA;;;;;;;;;;ACAA;AACA;AACA;AAEA;AACA;AACA;AAEA;AAGA;AAMA;AAAA;AAHA;AACA;AAGA;AACA;AACA;AAGA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAGA;AAEA;AAEA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AAEA;AAEA;AAEA;AACA;AAEA;AACA;AACA;AAEA;AAhFA;AAAA;;AAAA;AAkFA;;AAAA;AAjFA;;;;;;;;;;ACXA;AAAA;AAOA;AALA;AAEA;AACA;AACA;AACA;AAAA;AAPA;;;;;","sourceRoot":""}